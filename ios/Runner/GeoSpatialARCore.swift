// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct Coordinate {
  var latitude: Double
  var longitude: Double
  var altitude: Double

  static func fromList(_ list: [Any?]) -> Coordinate? {
    let latitude = list[0] as! Double
    let longitude = list[1] as! Double
    let altitude = list[2] as! Double

    return Coordinate(
      latitude: latitude,
      longitude: longitude,
      altitude: altitude
    )
  }
  func toList() -> [Any?] {
    return [
      latitude,
      longitude,
      altitude,
    ]
  }
}

private class GeospatialARCoreApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return Coordinate.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class GeospatialARCoreApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Coordinate {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class GeospatialARCoreApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return GeospatialARCoreApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return GeospatialARCoreApiCodecWriter(data: data)
  }
}

class GeospatialARCoreApiCodec: FlutterStandardMessageCodec {
  static let shared = GeospatialARCoreApiCodec(readerWriter: GeospatialARCoreApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol GeospatialARCoreApi {
  func startGeospatialARCoreSession(apiKey: String, horizontalAccuracyLowerLimitInMeters: Int64, cameraTimeoutInSeconds: Int64, showAdditionalDebugInfo: Bool, completion: @escaping (Result<Coordinate, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class GeospatialARCoreApiSetup {
  /// The codec used by GeospatialARCoreApi.
  static var codec: FlutterStandardMessageCodec { GeospatialARCoreApiCodec.shared }
  /// Sets up an instance of `GeospatialARCoreApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: GeospatialARCoreApi?) {
    let startGeospatialARCoreSessionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.geospatial_arcore.GeospatialARCoreApi.startGeospatialARCoreSession", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startGeospatialARCoreSessionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let apiKeyArg = args[0] as! String
        let horizontalAccuracyLowerLimitInMetersArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        let cameraTimeoutInSecondsArg = args[2] is Int64 ? args[2] as! Int64 : Int64(args[2] as! Int32)
        let showAdditionalDebugInfoArg = args[3] as! Bool
        api.startGeospatialARCoreSession(apiKey: apiKeyArg, horizontalAccuracyLowerLimitInMeters: horizontalAccuracyLowerLimitInMetersArg, cameraTimeoutInSeconds: cameraTimeoutInSecondsArg, showAdditionalDebugInfo: showAdditionalDebugInfoArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      startGeospatialARCoreSessionChannel.setMessageHandler(nil)
    }
  }
}
